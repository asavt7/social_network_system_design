// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project social_netrwork_db {
  database_type: 'PostgreSQL'
  Note: 'Social network Database'
}

Table users {
  id bigint [primary key]
  username varchar(100)
  created_at timestamp

  avatar_url text
  bio text
}

Table posts {
  user_id bigint [primary key]
  id bigint [primary key]
  created_at timestamp
  
  body text [note: 'Content of the post']
  photos uuid[]
  coordinates POINT

  updated_at timestamp
  status post_status
}

Enum post_status {
  draft
  published 
  deleted
}
Ref: posts.user_id > users.id // many-to-one


Table subsriptions {
  user_id bigint [primary key]
  subsribe_to_user_id bigint [primary key]
  created_at timestamp 
}
Ref: subsriptions.user_id > users.id // many-to-one
Ref: subsriptions.subsribe_to_user_id > users.id // many-to-one



Table user_media {
  user_id bigint [primary key]
  id uuid [primary key]
  created_at timestamp
  metadata jsonb
}

Ref: user_media.user_id > users.id // many-to-one


Table reactions {
  post_author_id bigint [primary key, note: 'post author']
  post_id bigint [primary key]
  reactor_id bigint [primary key, note: 'reactor user_id']
  reaction_id int2
  created_at timestamp
}

Ref: reactions.post_author_id > users.id // many-to-one
Ref: reactions.reactor_id > users.id // many-to-one

Ref: reactions.post_id > posts.id // many-to-one
Ref: reactions.post_author_id > posts.user_id // many-to-one

Table comments {
  post_author_id bigint [primary key, note: 'post author']
  post_id bigint [primary key]
  id bigint [primary key]
  
  сommenter_id bigint [primary key, note: 'сommenter user_id'] 
  reply_to_comment_id bigint [primary key]

  created_at timestamp
  body text [note: 'Content of the post']
  photos uuid[]

  updated_at timestamp
}

Ref: comments.post_author_id > users.id // many-to-one
Ref: comments.сommenter_id > users.id // many-to-one

Ref: comments.post_id > posts.id // many-to-one
Ref: comments.post_author_id > posts.user_id // many-to-one

Ref: comments.reply_to_comment_id > comments.id // many-to-one


Table user_feeds {
  user_id bigint [primary key]
  
  post_author_id bigint 
  post_id bigint
}
Ref: user_feeds.post_author_id > users.id // many-to-one
Ref: user_feeds.user_id > users.id // many-to-one
Ref: user_feeds.post_id > posts.id // many-to-one


Table locations {
    id bigint [primary key]
    coordinates POINT
    name text 
    description text 
}


Table location_feeds {
  location_id bigint [primary key]
  
  post_author_id bigint 
  post_id bigint
}
Ref: location_feeds.location_id > locations.id // many-to-one
